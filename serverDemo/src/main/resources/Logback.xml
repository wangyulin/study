<?xml version="1.0" encoding="UTF-8"?>
<!-- 部署出logback内部日志信息，每隔60s判断一下配置文件有没有个更新，若更新，则重新加载 -->
<configuration debug="false" scan="true" scanPeriod="60 seconds">
	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="/Users/wangyulin/workDir/miui/study/serverDemo/log" />
	<!-- 控制台输出 -->
	<!-- appender很重要，一个配置文件会有多个appender -->
	<!-- ConsoleApperder意思是从console中打印出来 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 过滤器，一个appender可以有多个 -->
		<!-- 阈值过滤，就是log行为级别过滤，debug及debug以上的信息会被打印出来 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>info</level>
		</filter>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern> -->
			<!--<pattern>%d %contextName %msg%n</pattern> -->
			<!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称 
				%message 调用方法的入参消息 -->
			<!-- <pattern>%d{yyyy-MM-dd HH:mm:ss,SSS} [%-5p]: %c %m%n</pattern> -->
			<!-- <Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]%logger{80}.%method\(\):%L %msg%n</Pattern> -->
			<Pattern>[%-5p %d{yyyy-MM-dd HH:mm:ss.SSS}] [%logger.%method\(\):%L] [%m]%n</Pattern>
		</encoder>
	</appender>

	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志输出文件 -->
		<file>${LOG_HOME}/serverDemo.log</file>
		<!-- 追加日志到原文件结尾 -->
		<append>true</append>
		<!-- timebasedrollingpolicy：演示时间和大小为基础的日志文件归档 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定。 -->
			<!--可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 -->
			<!--而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<!-- 文件滚动日期格式：每天：.YYYY-MM-dd（默认）；每星期：.YYYY-ww；每月：.YYYY-MM -->
			<!-- 每隔半天：.YYYY-MM-dd-a；每小时：.YYYY-MM-dd-HH；每分钟：.YYYY-MM-dd-HH-mm -->
			<fileNamePattern>${LOG_HOME}/log-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!-- 控制归档文件的最大数量的保存，删除旧的文件，默认单位天数 -->
			<maxHistory>7</maxHistory>
			<!-- 设置当前日志的文件的大小，决定日志翻滚 -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- 除按日志记录之外，还配置了日志文件不能超过10M(默认)，若超过10M，日志文件会以索引0开始， -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<!-- encoders 作用是将logger事件转换成字节数组，并将字节数组写入到输出流 -->
		<encoder>
			<pattern>[%-5p %d{yyyy-MM-dd HH:mm:ss.SSS}] [%logger.%method\(\):%L] [%m]%n</pattern>
		</encoder>
	</appender>
	
	<appender name="ACCESS_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/access.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>
				${application.home}/logs/access-log-%d{yyyy-MM-dd}.log.%i.gz
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>
				[%date{yyyy-MM-dd HH:mm:ss ZZZZ}] [%message]%n
			</pattern>
		</encoder>
	</appender>

	<!-- 日志输出级别 -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root>
	
	<logger name="access" level="INFO" additivity="false">
		<appender-ref ref="ACCESS_FILE" />
	</logger>
	
</configuration>
